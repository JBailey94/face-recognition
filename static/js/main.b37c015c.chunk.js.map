{"version":3,"sources":["components/navigation/Navigation.js","components/image-link-form/ImageLinkForm.js","components/rank/Rank.js","components/face-recognition/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","style","display","justifyContent","className","ImageLinkForm","onInputChange","onButtonSubmit","onChange","type","onClick","Rank","FaceRecognition","imageUrl","box","id","src","alt","width","height","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","particleOptions","particles","number","value","density","enable","size","random","anim","speed","size_min","line_linked","shadow","color","blue","interactivity","events","onhover","mode","onclick","modes","bubble","distance","duration","opacity","repulse","app","Clarifai","App","apiKey","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","console","log","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","error","this","params","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b37c015c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navigation = (props) => {\r\n    return (\r\n        <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n            <p className='f3 link dim black underline pa2 pointer white'>Sign Out</p>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport './ImageLinkForm.css'\r\n\r\n// whenever you pass a prop, the component that is passing thee prop must have the same name\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <p>\r\n                {'This will detect faces in your pictures. Try it out!'}\r\n            </p>\r\n            <div className='center'>\r\n                <div className='form center pa4 br4 shadow-5'>\r\n                    <input  onChange={onInputChange} className='br2 f4 pa2 w-70 center' type='text' />\r\n                    <button onClick={onButtonSubmit} className='ma2 w-25 grow f3 link ph3 pv2 dib br2 bg-light-blue'>Detect</button>\r\n                </div>\r\n            </div>\r\n        </div>   \r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\nconst Rank = () => {\r\n    return (\r\n        <div>\r\n            <div className='white f3'>\r\n                {'Jesse, your current rank is...'}\r\n            </div>\r\n            <div className='white f1'>\r\n                {'#5'}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rank;","import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({ imageUrl, box }) => {\r\n    return (\r\n      <div className='center ma4'>\r\n          <div className='absolute mt2'>\r\n            <img id='inputimage' src={imageUrl} alt={''} width='600px' height='auto'/>\r\n            <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default FaceRecognition;","import React, { Component } from 'react';\r\nimport Navigation from './components/navigation/Navigation';\r\nimport ImageLinkForm from './components/image-link-form/ImageLinkForm';\r\nimport Rank from './components/rank/Rank';\r\nimport FaceRecognition from './components/face-recognition/FaceRecognition';\r\nimport Particles from 'react-particles-js';\r\nimport Clarifai from 'clarifai';\r\nimport './App.css';\r\n\r\nconst particleOptions = { \r\n  particles: {\r\n    number: {\r\n      value: 160,\r\n      density: {\r\n          enable: false\r\n      }\r\n  },\r\n    size: {\r\n      value: 3,\r\n      random: true,\r\n      anim: {\r\n          speed: 4,\r\n          size_min: 0.3\r\n      }\r\n  },\r\n    line_linked: {\r\n      shadow: {\r\n        enable: true,\r\n        color: \"#3CA9D1\",\r\n        blue: 5\r\n      }\r\n    }\r\n  },\r\n  interactivity: {\r\n    events: {\r\n        onhover: {\r\n            enable: true,\r\n            mode: \"repulse\"\r\n        },\r\n        onclick: {\r\n            enable: true,\r\n            mode: \"repulse\"\r\n        }\r\n    },\r\n    modes: {\r\n        bubble: {\r\n            distance: 250,\r\n            duration: 2,\r\n            size: 0,\r\n            opacity: 0\r\n        },\r\n        repulse: {\r\n            distance: 200,\r\n            duration: 6\r\n        }\r\n    }\r\n  }\r\n}\r\n    \r\n// Clarifai initialize\r\nconst app = new Clarifai.App({\r\n  apiKey: '98d70806f17a461a8e9f977797f853ae'\r\n });\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      input: '',\r\n      imageUrl: '',\r\n      box: {}\r\n    }\r\n  }\r\n\r\n  calculateFaceLocation = (data) => {\r\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    const image = document.getElementById('inputimage');\r\n    const width = Number(image.width);\r\n    const height = Number(image.height);\r\n    console.log(width, height);\r\n    return {\r\n      leftCol: clarifaiFace.left_col * width,\r\n      topRow: clarifaiFace.top_row * height,\r\n      rightCol: width - (clarifaiFace.right_col * width),\r\n      bottomRow: height - (clarifaiFace.bottom_row * height)\r\n    }\r\n  }\r\n\r\n  displayFaceBox = (box) => {\r\n    console.log(box);\r\n    this.setState({box: box});\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    console.log(event);\r\n    this.setState({input: event.target.value})\r\n  }\r\n\r\n  onButtonSubmit = () => {\r\n    this.setState({imageUrl: this.state.input});\r\n    app.models.predict(\r\n      Clarifai.FACE_DETECT_MODEL,\r\n      this.state.input)\r\n    .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\r\n    .catch(error => console.log(error));\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"App\"> \r\n        <Navigation />      \r\n        <Rank />\r\n        <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\r\n        <Particles className='particles' params={ particleOptions } />\r\n        <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl} />\r\n    </div>\r\n    )\r\n  }  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}